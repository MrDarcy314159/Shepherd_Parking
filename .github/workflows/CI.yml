# Name of the workflow
name: Android CI

# Controls when the workflow will run
on:
  push:
    branches:
      - master  # Run on pushes to the master branch
  pull_request:
    branches:
      - master  # Run on pull requests to the master branch

  # Allows you to trigger the workflow manually from the GitHub Actions tab
  workflow_dispatch:

# A workflow run consists of jobs
jobs:
  build:
    # The type of runner (Ubuntu is used for building Android projects)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Check out the code
        uses: actions/checkout@v4

      # Step 2: Set up JDK for Android (necessary for Gradle to work)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'  # You may need to update this based on your project requirements

      # Step 3: Set up the Android SDK (required for building Android apps)
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 33  # Specify your target Android API level
          build-tools-version: '33.0.0'  # Specify your project's build tools version
          components: |
            platform-tools
            build-tools;33.0.0
            android-33
            extra-google-google_play_services
            extra-google-m2repository
            extra-android-m2repository

      # Step 4: Cache Gradle dependencies to speed up future builds
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      # Step 5: Build the Android project
      - name: Build the project
        run: ./gradlew build --stacktrace

      # Step 6: Run Android Lint checks to catch code issues
      - name: Run Lint checks
        run: ./gradlew lint

      # Step 7: Run Unit Tests
      - name: Run Unit Tests
        run: ./gradlew test

      # Step 8: Run Instrumented UI Tests (requires Android emulator)
      - name: Run Instrumented Tests
        run: ./gradlew connectedAndroidTest
