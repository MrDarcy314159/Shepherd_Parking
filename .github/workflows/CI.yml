# Name of the workflow
name: Android CI with Instrumented Tests

# Controls when the workflow will run
on:
  push:
    branches:
      - master  # Run on pushes to the master branch
  pull_request:
    branches:
      - master  # Run on pull requests to the master branch
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Check out the code
        uses: actions/checkout@v4

      # Step 2: Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Step 3: Set up JDK for Android (necessary for Gradle to work)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'  # Set the required Java version for your project

      # Step 4: Set up the Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 33  # Specify your Android API level
          build-tools-version: '33.0.0'
          components: |
            platform-tools
            build-tools;33.0.0
            android-33
            system-images;android-33;default;x86_64  # System image required for the emulator
            extra-google-google_play_services
            extra-google-m2repository
            extra-android-m2repository

      # Step 5: Cache Gradle dependencies to speed up future builds
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      # Step 6: Build the Android project
      - name: Build the project
        run: ./gradlew build --stacktrace

      # Step 7: Set up and start the Android Emulator
      - name: Start Android Emulator
        run: |
          echo "Setting up Android Emulator"
          adb devices
          echo "Creating AVD"
          echo no | avdmanager create avd -n test -k "system-images;android-33;default;x86_64" --force
          $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader_indirect &
          adb wait-for-device
          adb shell input keyevent 82

      # Step 8: Wait for emulator to fully boot
      - name: Wait for Emulator Boot
        run: |
          adb wait-for-device
          adb shell getprop sys.boot_completed | grep -m 1 '1'

      # Step 9: Run Android Lint checks
      - name: Run Lint checks
        run: ./gradlew lint

      # Step 10: Run Unit Tests
      - name: Run Unit Tests
        run: ./gradlew test

      # Step 11: Run Instrumented UI Tests on Emulator
      - name: Run Instrumented Tests
        run: ./gradlew connectedAndroidTest

      # Step 12: Kill the emulator after tests are done
      - name: Shutdown Emulator
        run: adb -s emulator-5554 emu kill
